
public class MergeSort {
    
    public void merge(int[] arr, int p, int q, int r) {
        // Find size of left and right halves
        int n1 = q - p + 1;
        int n2 = r - q;
        
        // Create temp array
        int[] L = new int[n1];
        int[] R = new int[n2];
        
        // Copy elements into temp array
        for(int i = 0; i < n1; i++) {
            L[i] = arr[p + i];
        }
        
        for(int j = 0; j < n2; j++) {
            R[j] = arr[q + 1 + j];
        }
        
        // Sort and merge the two halves
        int i = 0, j = 0, k = p;
        while(i < n1 && j < n2) {
            if(L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        
        // Copy the remaining elements
        while(i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        
        while(j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    
    public void mergeSort(int[] arr, int p, int r) {
        if(p < r) {
            
            // Find the middle element
            int q = (p + r) / 2;
            
            // Sort left and right halves
            mergeSort(arr, p, q);
            mergeSort(arr, q + 1, r);
            
            // Merge sorted arrays
            merge(arr, p, q, r);
        }
    }
    
    
    public static void printArray(int[] arr) {
        for(int i = 0; i < arr.length; i++) {
            System.out.print(arr[i]+ " ");
        }
        System.out.println("");
    }
    
    public static void main(String[] args) {
        int[] arr = {5, 2, 4, 6, 1, 3};
        System.out.println("Array before sorting");
        printArray(arr);
        
        MergeSort ms = new MergeSort();
        ms.mergeSort(arr, 0, arr.length - 1);
        System.out.println("Array after sorting");
        printArray(arr);
    }
}
